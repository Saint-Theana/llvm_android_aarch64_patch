--- ../llvm_android_origin/builders.py	2021-11-09 18:35:36.549315192 +0800
+++ builders.py	2021-11-10 01:20:07.495066362 +0800
@@ -90,7 +90,7 @@ class Stage1Builder(base_builders.LLVMBu
         # avoids specifying self.toolchain.lib_dir in rpath to find libc++ at
         # runtime.
         # [1] libc++ in our case, despite the flag saying -static-libstdc++.
-        ldflags.append('-static-libstdc++')
+        ldflags.append('-lstdc++ -static-libstdc++')
         return ldflags
 
     @property
@@ -155,7 +155,7 @@ class Stage2Builder(base_builders.LLVMBu
         env = super().env
         # Point CMake to the libc++ from stage1.  It is possible that once built,
         # the newly-built libc++ may override this because of the rpath pointing to
-        # $ORIGIN/../lib64.  That'd be fine because both libraries are built from
+        # $ORIGIN/../lib.  That'd be fine because both libraries are built from
         # the same sources.
         env['LD_LIBRARY_PATH'] = str(self.toolchain.lib_dir)
         return env
@@ -234,6 +234,7 @@ class Stage2Builder(base_builders.LLVMBu
 
     def install_config(self) -> None:
         super().install_config()
+        os.symlink(self.install_dir/'include'/'c++'/'v1', self.install_dir/'include'/'c++'/'7')
         lldb_wrapper_path = self.install_dir / 'bin' / 'lldb.sh'
         lib_path_env = 'LD_LIBRARY_PATH' if self._config.target_os.is_linux else 'DYLD_LIBRARY_PATH'
         lldb_wrapper_path.write_text(textwrap.dedent(f"""\
@@ -295,8 +296,10 @@ class BuiltinsBuilder(base_builders.LLVM
         sarch = 'i686' if arch == hosts.Arch.I386 else arch.value
         filename = 'libclang_rt.builtins-' + sarch + '-android.a'
         filename_exported = 'libclang_rt.builtins-' + sarch + '-android-exported.a'
-        src_path = self.output_dir / 'lib' / 'linux' / filename
 
+        src_path = self.output_dir / 'lib' / 'linux' / filename
+        print(src_path)
+        print(self.output_toolchain.resource_dir / filename)
         if self.is_exported:
             # This special copy exports its symbols and is only intended for use
             # in Bionic's libc.so.
@@ -446,6 +449,49 @@ class CompilerRTHostI386Builder(base_bui
         super()._build_config()
 
 
+class CompilerRTHostAarch64Builder(base_builders.LLVMRuntimeBuilder):
+    name: str = 'compiler-rt-aarch64-host'
+    src_dir: Path = paths.LLVM_PATH / 'compiler-rt'
+    config_list: List[configs.Config] = [configs.LinuxConfig(is_32_bit=False)]
+
+    @property
+    def install_dir(self) -> Path:
+        return self.output_toolchain.clang_lib_dir
+
+    @property
+    def cmake_defines(self) -> Dict[str, str]:
+        defines = super().cmake_defines
+        # Due to CMake and Clang oddities, we need to explicitly set
+        # CMAKE_C_COMPILER_TARGET and use march=i686 in cflags below instead of
+        # relying on auto-detection from the Compiler-rt CMake files.
+        defines['CMAKE_C_COMPILER_TARGET'] = 'aarch64-linux-gnu'
+        defines['COMPILER_RT_INCLUDE_TESTS'] = 'ON'
+        defines['COMPILER_RT_ENABLE_WERROR'] = 'ON'
+        defines['SANITIZER_CXX_ABI'] = 'libstdc++'
+        return defines
+
+    @property
+    def cflags(self) -> List[str]:
+        cflags = super().cflags
+        # compiler-rt/lib/gwp_asan uses PRIu64 and similar format-specifier macros.
+        # Add __STDC_FORMAT_MACROS so their definition gets included from
+        # inttypes.h.  This explicit flag is only needed here.  64-bit host runtimes
+        # are built in stage1/stage2 and get it from the LLVM CMake configuration.
+        # These are defined unconditionaly in bionic and newer glibc
+        # (https://sourceware.org/git/gitweb.cgi?p=glibc.git;h=1ef74943ce2f114c78b215af57c2ccc72ccdb0b7)
+        cflags.append('-D__STDC_FORMAT_MACROS')
+        cflags.append('--target=aarch64-linux-gnu')
+        cflags.append('-march=armv8-a')
+        return cflags
+
+    def _build_config(self) -> None:
+        # Also remove the "stamps" created for the libcxx included in libfuzzer so
+        # CMake runs the configure again (after the cmake caches are deleted).
+        stamp_path = self.output_dir / 'lib' / 'fuzzer' / 'libcxx_fuzzer_aarch64-stamps'
+        if stamp_path.exists():
+            shutil.rmtree(stamp_path)
+        super()._build_config()
+
 class LibUnwindBuilder(base_builders.LLVMRuntimeBuilder):
     name: str = 'libunwind'
     src_dir: Path = paths.LLVM_PATH / 'runtimes'
@@ -475,6 +521,11 @@ class LibUnwindBuilder(base_builders.LLV
         return super().cflags + ['-D_LIBUNWIND_USE_DLADDR=0']
 
     @property
+    def cxxflags(self) -> List[str]:
+        print(super().cxxflags)
+        return super().cxxflags
+
+    @property
     def ldflags(self) -> List[str]:
         # Override the default -unwindlib=libunwind. libunwind.a doesn't exist
         # when libunwind is built, and libunwind can't use
@@ -824,7 +875,7 @@ class SysrootsBuilder(base_builders.Buil
             # Create a stub library for the platform's libc++.
             platform_stubs = paths.OUT_DIR / 'platform_stubs' / config.ndk_arch
             platform_stubs.mkdir(parents=True, exist_ok=True)
-            libdir = sysroot / 'usr' / ('lib64' if arch == hosts.Arch.X86_64 else 'lib')
+            libdir = sysroot / 'usr' / ('lib' if arch == hosts.Arch.X86_64 else 'lib')
             libdir.mkdir(parents=True, exist_ok=True)
             with (platform_stubs / 'libc++.c').open('w') as f:
                 f.write(textwrap.dedent("""\
@@ -880,7 +931,7 @@ class PlatformLibcxxAbiBuilder(base_buil
 
     def install_config(self) -> None:
         arch = self._config.target_arch
-        lib_name = 'lib64' if arch == hosts.Arch.X86_64 else 'lib'
+        lib_name = 'lib' if arch == hosts.Arch.X86_64 else 'lib'
         install_dir = self._config.sysroot / 'usr' / lib_name
 
         if self._is_64bit():
@@ -987,14 +1038,22 @@ class WindowsToolchainBuilder(base_build
             # pthread is needed by libgcc_eh.
             ldflags.append('-pthread')
 
+            ldflags.append('-Wl,--dynamicbase')
+            ldflags.append('-Wl,--nxcompat')
+            ldflags.append('-Wl,--high-entropy-va')
+            ldflags.append('-Wl,--Xlink=-Brepro')
             libpath_prefix = '-L'
         else:
+            ldflags.append('/dynamicbase')
+            ldflags.append('/nxcompat')
+            ldflags.append('/highentropyva')
+            ldflags.append('/Brepro')
             libpath_prefix = '/LIBPATH:'
 
         ldflags.append(libpath_prefix + str(paths.WIN_ZLIB_LIB_PATH))
         if self.libcxx_path:
             # Add path to libc++, libc++abi.
-            libcxx_lib = self.libcxx_path / 'lib64'
+            libcxx_lib = self.libcxx_path / 'lib'
             ldflags.append(libpath_prefix + str(libcxx_lib))
         return ldflags
 
@@ -1019,7 +1078,7 @@ class WindowsToolchainBuilder(base_build
             # options like visibility annotations, win32 threads etc. because the
             # __generated_config header in the patch captures all the options used when
             # building libc++.
-            cxx_headers = self.libcxx_path / 'include' / 'c++' / 'v1'
+            cxx_headers = self.libcxx_path / 'include' / 'c++' / '7'
             cxxflags.append(f'-I{cxx_headers}')
 
         return cxxflags
